## Extracting clinical data
## N.B.
## July 2023

# Load packages into R
library(readxl)
library(kableExtra)

# Set the working directory

# Load data
clinicaldata_competition <- read_xlsx("Data_matched_incl_anonymization.xlsx") %>%
  select(`Intra-arterial treatment` = IAT, Sex = sex, `Age (y)` = age, `Intravenous thrombolysis` = IVT, INR, `Serum creatinine (Î¼mol/l)` = serum_creatinin, `Systolic blood pressure (mmHg)` = systolic_blood_pressure, `Diastolic blood pressure (mmHg)` = diastolic_blood_pressure, `History of stroke` = previous_stroke, `Diabetes mellitus` = diabetes_mellitus, Hypertension = hypertension, `Atrial fibrillation` = atrial_fibrillation, `Prestroke mRS (0-6)` = prestroke_mrs, `Time from symptom onset to door (min)` = symptom_onset_to_door, `NIHSS baseline` = NIHSS_baseline, `Occlusion site` = occlusion_site, `Collateral score (0-3)` = collateral_score, anonym_ID_part1, anonym_ID_part2)

# Define the main folder name
main_folder_name <- "DL vs neurologists"

# Create the main folder if it doesn't exist
main_folder <- file.path(getwd(), main_folder_name)
if (!file.exists(main_folder)) {
  stop("Main folder 'DL vs neurologists' does not exist. Run the script for creating folder structure first.")
}

# Define the function to save clinical data in patient folders
save_clinical_data <- function(anonym_ID_vector, part_folder, clinicaldata_competition) {
  for (anonym_ID in anonym_ID_vector) {
    patient_folder <- file.path(part_folder, anonym_ID)
    if (!file.exists(patient_folder)) {
      stop("Patient folder not found. Run the script for creating folder structure first.")
    }
    
    # Filter clinical data for the current patient
    patient_data <- clinicaldata_competition %>%
      filter((part_folder == part1_folder & anonym_ID_part1 == anonym_ID) |
               (part_folder == part2_folder & anonym_ID_part2 == anonym_ID))
    
    # Select columns to exclude
    cols_to_exclude <- c("anonym_ID_part1", "anonym_ID_part2")
    
    # Transpose the data for table display, excluding specified columns
    transposed_data <- t(select(patient_data, -one_of(cols_to_exclude)))
    
    # Create the kable table with transposed data
    kable_table <- kable(transposed_data, format = "html", escape = FALSE) %>%
      kable_styling(bootstrap_options = "striped", full_width = FALSE)
    
    # Save the kable table as an HTML file in the patient folder
    html_file <- file.path(patient_folder, paste0("Clinicaldata_", anonym_ID, ".html"))
    
    # Create the HTML content with title, subtitle, and table
    html_content <- sprintf(
      "<html><head><style>body { display: flex; justify-content: center; align-items: center; height: 100vh; }</style></head><body><div style='text-align: center;'><h1>DL vs Neurologist</h1>\n<h2>%s</h2>\n\n%s</div></body></html>",
      anonym_ID,
      as.character(kable_table)
    )
    
    # Write the HTML content to the file
    writeLines(html_content, html_file)
  }
}

# Managing and Storing Clinical Data for Raters and Parts
for (rater_number in 1:5) {
  rater_folder <- file.path(main_folder, paste0("Rater", rater_number, "_Name"))
  part1_folder <- file.path(rater_folder, "DL vs Neurologist Part 1")
  part2_folder <- file.path(rater_folder, "DL vs Neurologist Part 2")
  
  anonym_ID_part1_vector <- unique(clinicaldata_competition$anonym_ID_part1)
  anonym_ID_part2_vector <- unique(clinicaldata_competition$anonym_ID_part2)
  
  # Save clinical data for Part 1 and Part 2 for the current rater
  save_clinical_data(anonym_ID_part1_vector, part1_folder, clinicaldata_competition)
  save_clinical_data(anonym_ID_part2_vector, part2_folder, clinicaldata_competition)
}
